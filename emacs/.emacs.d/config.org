
* Keybindings

** TODO Make use of keymaps

That should be *way* cleaner than putting everything into that huge
mess that is the global keymap. Should also be /the/ way to a
configurable leader-key.

** Use `smarter-move-beginning-of-line`
#+begin_src emacs-lisp  :results silent
  (global-set-key [remap move-beginning-of-line]
                  'smarter-move-beginning-of-line)
#+end_src
** Helper functions
#+begin_src emacs-lisp  :results silent
(defun skeleten/define-global-key (key desc command)
  "Bind a key to the global key map with an description"
  (global-set-key (kbd key) command)
  (which-key-add-key-based-replacements key desc))
(defun skeleten/define-global-prefix (pref desc)
  "Define a description for a global prefix"
  (which-key-add-prefix-title pref desc))

(defun skeleten/define-global-keys (list)
  "Define a list of Key description and commands to the global keymap."
  (if (consp list)
      (let ((key (car list))
	    (desc (car (cdr list)))
	    (command (car (cdr (cdr list))))
	    (rest (cdr (cdr (cdr list)))))
	(skeleten/define-global-key key desc command)
	(skeleten/define-global-keys rest))))
#+end_src
** Unbind some stuff to avoid collisions
#+begin_src emacs-lisp  :results silent
(global-unset-key (kbd "M-m"))
#+end_src
** Finding and searching stuff
#+begin_src emacs-lisp  :results silent
(skeleten/define-global-keys
 '("C-s"	"Search"			swiper
   "M-x"	"M-x"				counsel-M-x
   "C-x C-f"	"Find file"			counsel-find-file
   "C-h f"	"Describe function"		counsel-describe-function
   "C-h k"	"Describe key"			describe-key
   "C-x b"	"Switch buffer"			switch-to-buffer
   ))
#+end_src
** Multiple-Cursors
#+begin_src emacs-lisp  :results silent
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
(global-set-key (kbd "C-<") 'mc/mark-next-like-this)
(global-set-key (kbd "C->") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+end_src
** Company
#+begin_src emacs-lisp  :results silent
(global-set-key [?\M-\t] 'company-complete)
(global-set-key [?\C-\t] 'company-complete)
#+end_src
** Magit
#+begin_src emacs-lisp  :results silent
  (global-set-key (kbd "C-x g") 'magit-status)
#+end_src
** Mail
#+begin_src emacs-lisp  :results silent
  (skeleten/define-global-prefix "M-m m" "Mail")
  (skeleten/define-global-keys
   '("M-m m o"    "Open Email interface"          mu4e
     "M-m m u"    "Update email and index"        mu4e-update-mail-and-index))
#+end_src
** Org
#+begin_src emacs-lisp  :results silent
  (skeleten/define-global-prefix "M-m o" "Org mode")
  (skeleten/define-global-keys
   '("M-m o a"    "Open Org Agenda"       org-agenda
     "M-m o e"	"Evaluate SRC-block"	org-babel-execute-src-block))
#+end_src

** TODO Sort / Misc
#+begin_src emacs-lisp  :results silent
  (global-set-key (kbd "M-n") 'er/expand-region)
  (skeleten/define-global-key "M-m c" "Compile" 'compile)
  (skeleten/define-global-keys
   '("M-m s"      "Jump to char on screen"        ace-jump-char-mode
     "C-."        "Toggle folding"                origami-toggle-node))
  (skeleten/define-global-key "M-m f f" "Find file in Project"
			      'projectile-find-file)
  (skeleten/define-global-key "C-S-i" "Open iMenu"
			      'imenu)

  (skeleten/define-global-key "M-m f t" "Toggle Treemacs"
			      'treemacs)
#+end_src

** Modes
*** java-mode
#+BEGIN_SRC emacs-lisp :results silent
  (eval-after-load 'java
    '(define-key java-mode-map (kbd "C-s-i") 'lsp-ui-imenu))
#+END_SRC
*** lsp-ui-mode
#+BEGIN_SRC emacs-lisp :results silent
  (eval-after-load 'lsp-ui
    '(progn (define-key lsp-ui-mode-map
	      [remap xref-find-definitions]
	      #'lsp-ui-peek-find-definitions)
	    (define-key lsp-ui-mode-map
	      [remap xref-find-references]
	      #'lsp-ui-peek-find-references)
	    (define-key lsp-ui-mode-map
	      [remap imenu]
	      #'lsp-ui-imenu)))
#+END_SRC
* Coding

